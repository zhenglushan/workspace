
sudo echo "151.101.108.133   raw.githubusercontent.com" >> /etc/hosts

配置 zsh 为默认 shell: 我们可以输入 zsh 进入 zsh shell 格式。
1. 换主题: 主题存放目录在 ~/.oh-my-zsh/themes/
vim ~/.zshrc
ZSH_THEME="主题名称" → agnoster

2. 定义目录别名: 在~/.zshrc 文件末尾处添加
格式为:
hash -d 名称="文件夹的位置"
hash -d Video="/home/shan/视频"
hash -d Sound="/home/shan/音频"
hash -d Image="/home/shan/图像"
hash -d Document="/home/shan/文档"
hash -d Others="/home/shan/杂项"
以后直接输入 cd ~Video, zsh 就会帮我定义到 /home/shan/视频 这个文件夹。

3. 定义命令别名: 在 ~/.zshrc 中添加
在 alias 之后添加，比如:
alias SS='sudo pacman -S'
alias SSs='sudo pacman -Ss'
alias SSyy='sudo pacman -Syy'

	[
		https://blog.csdn.net/kingolie/article/details/53066679
	]



在安装主题和图标包之前，需要安装相关的安装工具：
ocs-url https://www.opendesktop.org/p/1136805/
或者
pling-store https://www.opendesktop.org/p/1175480/

这里我们选择安装 ocs-url 工具:
打开 https://www.opendesktop.org/p/1136805/ 在 Download 选择 xz 压缩包进行下载；
然后执行如下命令安装:
Arch Linux
sudo pacman -S qt5-base qt5-svg qt5-declarative qt5-quickcontrols
sudo pacman -U ocs-url-3.1.0-1-x86_64.pkg.tar.xz

添加 hosts
172.67.73.202   store.kde.org







ArchLinux 美化展示: https://www.bilibili.com/video/BV1V7411p7TD/
ArchLinux 美化过程: https://www.bilibili.com/video/bv1bE411u7QT/

==================== 第二部分 ====================
安装 zsh 和 oh-my-zsh
插件列表 https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins-Overview
主题列表 https://github.com/ohmyzsh/ohmyzsh/wiki/themes

1、安装 zsh
sudo pacman -S zsh
验证安装结果: 
zsh --version

2、安装 oh-my-zsh
下载 https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh 文件，并另存为 oh-my-zsh.sh 文件。
权限 chmod -R 777 oh-my-zsh.sh
安装 ~/oh-my-zsh.sh

3、修改主题配置
主题目录 ~/.oh-my-zsh/custom/themes/
修改 ~/.zshrc 配置文件，配置该主题
ZSH_THEME="agnoster"

4、安装插件
cd ~/.oh-my-zsh/custom/plugins

git clone https://github.com/zsh-users/zsh-autosuggestions.git
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
git clone https://github.com/zsh-users/zsh-completions.git
git clone https://github.com/thetic/extract.git
git clone https://github.com/sinetoami/web-search.git
git clone https://github.com/rupa/z.git

5、修改插件配置
# 注意：zsh-syntax-highlighting 必须放在最后面(官方推荐)
# git 默认已安装，这里做个配置
# 找到 plugins=(git) 修改成如下： 修改 ~/.zshrc 配置文件，配置安装的插件
plugins=(git extract web-search z zsh-autosuggestions zsh-completions zsh-syntax-highlighting)

6、重新加载配置
source ~/.zshrc

7、卸载
uninstall_oh_my_zsh
rm -rf ~/.oh-my-zsh/
rm -rf ~/.zshrc
sudo pacman -R zsh
-------------------------------------------------
sudo pacman -S fish

sudo nano /etc/passwd

sudo curl -L https://get.oh-my.fish | fish

==================== 第三部分 ====================
0、配置代理
http://xiaomi-lab.huanleguang.cn/hlg.pac.php

1、安装 NeoVim
官网地址:
https://github.com/neovim/neovim/wiki/Installing-Neovim

安装命令:
```shell
sudo pacman -S neovim
```

配置文件地址: ~/.config/nvim/init.vim (需要手工创建)
mkdir ~/.config/nvim
touch ~/.config/nvim/init.vim

2、安装 vim-plug
https://github.com/junegunn/vim-plug

sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

```shell
call plug#begin('~/.config/nvim/plugged')

call plug#end()
```
在 init.vim 添加如上插件，才能在 Vim 中使用 vim-plug 的相关命令。

3、安装 coc.nvim
sudo pacman -S nodejs
sudo pacman -S npm
sudo pacman -S yarn

https://github.com/neoclide/coc.nvim
Plug 'neoclide/coc.nvim', {'branch': 'release'}
:PlugInstall

回车之后，会通过 yarn 下载 source code 进行相关插件的安装。重启之后，会创建 ~/.config/coc 目录，用于保存 coc 安装的相关代码提示插件。

然后通过 coc 安装相关语言的代码提示：

https://github.com/neoclide/coc-snippets
:CocInstall coc-snippets
:CocInstall coc-html
:CocInstall coc-css
:CocInstall coc-json
:CocInstall coc-tsserver

php:CocInstall coc-phpls
	1. sudo npm i intelephense -g
	2. :CocInstall coc-phpls
	3. 因为 coc-phpls 的语言服务功能由 intelephense-docs 提供
php:CocInstall coc-phpactor
	1. sudo pacman -S composer
	2. composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/
	3. https://phpactor.readthedocs.io/en/develop/usage/standalone.html
	3. :CocInstall coc-phpactor

:CocInstall coc-python
	pip3 install pylint
	pip3 install jedi
	:CocInstall coc-python
	然后就可以使用 Python 代码提示里。
:CocInstall coc-java
	sudo pacman -S jdk8-openjdk
	[coc.nvmi] jdt.ls not found, downloading [安装很慢，需要耐心等待]
	[coc.nvim] JDT Language Server started
	出现错误:
	[coc.nvim] The "java" server crashed 5 times in the last 3 minutes. The server will not be restarted.
	rm -rf coc-java-data
	然后编辑 Java 文件，会开始重新下载 jdt.ls 。

:CocInstall coc-go
	sudo pacman -S go
	go version

	https://github.com/golang/tools/blob/master/gopls/doc/user.md
	go get golang.org/x/tools/gopls@latest
	go: cannot use path@version syntax in GOPATH mode
	go env -w GO111MODULE=on
	go env -w GOPROXY=https://goproxy.io,direct
	go get golang.org/x/tools/gopls@latest

	https://github.com/golang/tools/blob/master/gopls/doc/vim.md
	Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
	let g:go_def_mode='gopls'
	let g:go_info_mode='gopls'

	{
		"languageserver": {
			"golang": {
				"command": "gopls",
				"rootPatterns": ["go.mod", ".vim/", ".git/", ".hg/"],
				"filetypes": ["go"]
			}
		}
	}

	出现错误:
	go: cannot find main module; see 'go help modules'
	解决
	go mod init 项目


for C/C++/Objective-C
	https://github.com/clangd/coc-clangd
	clangd 是 llvm 的一部分，所以直接安装 llvm 即可
	sudo pacman -S llvm
	:CocInstall coc-clangd
	[coc.nvim] clangd was not found on your PATH. :CocCommand clangd.install will install 10.0.0.


	[coc.nvim] Failed to install clangd language server: TypeError: Expected signal to be an instanceof Abort Signal
	You may want to install it manually. See https://clangd.llvm.org/installation.html.

	https://github.com/autozimu/LanguageClient-neovim/wiki/Clangd
	sudo pacman -Syu clang
	'header' file not found [clang-diagnostic-error]



:help coc-nvim 打开 coc.nvim 帮助文档
https://zhuanlan.zhihu.com/p/102306124


4、其它插件

ctags 代码跳转插件


fzf 文件模糊搜索
https://github.com/junegunn/fzf
Plug 'junegunn/fzf'

ale 语法检查
https://github.com/dense-analysis/ale
Plug 'dense-analysis/ale'

悬浮窗 https://www.joyk.com/dig/detail/1555144300715374
Markdown
word

	
NeoVim 错误解决:
1. symbol lookup error: node: undefined symbol: nghttp2_option_set_max_outbound_ack
   	https://www.archlinux.org/packages/?q=libnghttp2
   	sudo pacman -S libnghttp2

highlight Normal guibg=NONE ctermbg=None " 设置背景透明

启动 NeoVim 时，提示 Error on execute python script: request error nvim_command 错误：
pip3 install -i https://pypi.doubanio.com/simple neovim
	Successfully built neovim pynvim
	Installing collected packages: greenlet, pynvim, neovim
	Successfully installed greenlet-0.4.16 neovim-0.3.1 pynvim-0.4.1



修改 Python 镜像源
	临时
		pip install -i https://pypi.doubanio.com/simple/ pygame
	永久
在此目录新建~/.pip/pip.conf文件，使用 vim 或者 nano 编辑器进行如下编辑并保存
[global]
timeout =60
index-url =https://pypi.douban.com/simple/
[install]
use-mirrors =true 
mirrors =https://pypi.douban.com/simple/ 
trusted-host =pypi.douban.com




Laravel 开发
composer create-project --prefer-dist laravel/laravel blog



建立文件夹
:!mkdir mydir
建立文件
:sp mydir/mytest.txt

-------------------------------------
Archlinux 从 AUR 源中安装应用

AUR 首页地址: https://aur.archlinux.org/

1. 打开 AUR 首页，在软件包搜索栏输入想要查找的软件包的名称；
2. 选择对应的软件点击进入；
3. 将软件包源码下载到本地并解压或者选择用 git clone 下载源码；
4. 进入目录
5. 执行 makepkg -s (-s 解决依赖问题) 命令，生成安装包
6. sudo pacman -U xxx.pkg.tar.zst

其实以上的操作过程，只是把 deb 打包成了 .pkg.tar.zst 文件格式，这样 pacman 就可以进行安装了。

通过这种方式安装如下软件:
https://aur.archlinux.org/packages/dingtalk-linux/ 钉钉 可以使用。
https://aur.archlinux.org/packages/deepin-wine-thunderspeed/ 迅雷 可以使用。。
	下载下来之后，里面似乎有安装但是其实还是需要执行 makepkg 来打包的。
https://aur.archlinux.org/packages/deepin-wine-wechat/ 微信 可以使用。
https://aur.archlinux.org/packages/fcitx-sogoupinyin/ 搜狗拼音 可以使用 需要重启系统。
	在执行 makepkg 的时候，有些小问题，字体显示有问题。

	Still not working? Try rm -rf ~/.sogouinput ~/.config/SogouPY* and re-login.
	rm -rf ~/.sogouinput 
 	rm -rf ~/.config/SogouPY*
 	然后注销并重新登录。
 	无法完美解决。
```
Can't translate pathname 'usr/share/sogou-qimpanel/cell/defaultCell/成语俗语【官方推荐】.scel' to UTF-8: Can't translate pathname 'usr/share/sogou-qimpanel/cell/defaultCell/网络流行新词【官方推荐】.scel' to UTF-8: Can't translate pathname 'usr/share/sogou-qimpanel/cell/defaultCell/计算机词汇大全【官方推荐】.scel' to UTF-8: Can't translate pathname 'usr/share/sogou-qimpanel/recommendSkin/skin/Mac黑键盘/' to UTF-8: Can't translate pathname 'usr/share/sogou-qimpanel/recommendSkin/skin/Mac黑键盘/Mac黑键盘.ssf' to UTF-8: Can't translate pathname 'usr/share/sogou-qimpanel/recommendSkin/ski
``` 	


-------------------------------------
如何把 .deb 软件包转换成 Arch Linux 软件包

https://www.jianshu.com/p/2b9b9acdd654
-------------------------------------


-------------------------------------







++++++++++++++++++++++++++++++++++++++++++++++++++++++++

同时推送到 Gitee 和 GitHub 托管.txt

本地仓库:

git init
把当前目录创建成一个仓库

git add <file>
把文件添加到本地仓库

git commit -m <"message">
把文件提交到本地仓库

git status
查看当前仓库的状态，也就是是否有文件被修改过

git diff
查看当前仓库的具体修改情况，查看具体修改内容

GitHub 仓库:

GitHub → Create repository | (New repository) → Repository name: ShanHai → Description: 山海的私人代码托管。 → Privete → Create repository 即可。

把本地仓库推送到 GitHub 仓库:
git remote add github_shanhai https://github.com/zhenglushan/shanhai.git
或者
git remote add github_shanhai git@github.com:zhenglushan/shanhai.git

git push -u github_shanhai master

SSH 处理: 在本地生成秘钥
ssh-keygen -t rsa -C "youreamil"


参考地址:

https://www.liaoxuefeng.com/wiki/896043488029600/1163625339727712

===============================================================

https://blog.csdn.net/feiyu5323/article/details/90707852
https://www.imooc.com/article/304776
https://www.bilibili.com/read/cv5124968?from=search
https://github.com/theniceboy/nvim/blob/master/README_cn.md


https://www.bilibili.com/video/BV1954118742/?spm_id_from=333.788.videocard.10
https://github.com/KyleJKC/nvim
https://www.pianshen.com/article/15501275839/

美化
https://www.bilibili.com/video/BV1T4411m79Y/?spm_id_from=333.788.videocard.2
https://www.jianshu.com/p/9b4f66a5b2f7
https://github.com/orangbus/tool


https://github.com/WenAnrong/vimrc/blob/master/.vimrc#L77
https://blog.csdn.net/weixin_45248543/article/details/107599112










